# Generated by Django 3.1.4 on 2021-01-28 12:45

import _socket
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_revision.revision_field
import edc_base.model_fields.hostname_modification_field
import edc_base.model_fields.userfield
import edc_base.model_fields.uuid_auto_field
import edc_base.utils
import simple_history.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('sites', '0002_alter_domain_unique'),
    ]

    operations = [
        migrations.CreateModel(
            name='CommunityEngagementQuestionnare',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activeness', models.CharField(blank=True, choices=[('very_active', 'very active'), ('somewhat_active', 'somewhat active'), ('not_active', 'not active at all'), ('no_answer', 'dont want to answer')], max_length=50, null=True, verbose_name='How active are you in community activities such as burial society, Motshelo, Syndicate, PTA, VDC(Village Development Committee), Mophato and development of the community that surrounds you?')),
                ('voting', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no'), ('not_applicable', 'not applicable (no ,election , cant vote)'), ('no_answer', 'do not want to answer')], max_length=25, null=True, verbose_name='Did you vote in the last local government election?')),
                ('problems', models.CharField(blank=True, choices=[('hiv_aids', 'HIV/AIDS'), ('schools', 'schools'), ('sewer', 'sewer'), ('unemployment', 'unemployment'), ('roads', 'roads'), ('water', 'water'), ('house', 'house'), ('malaria', 'malaria')], max_length=25, null=True, verbose_name='What are the major problems in this neighborhood?')),
                ('neighborhood', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no'), ('dont_know', 'do not know'), ('no_answer', 'do not want to answer')], max_length=25, null=True, verbose_name='If there is a problem in this neighborhood, do the adults work together in solving it?')),
            ],
        ),
        migrations.CreateModel(
            name='Education',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('work', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=5, null=True, verbose_name='Are you currently working?')),
                ('type_of_work', models.CharField(blank=True, choices=[('occasion', 'occasional or Casual employment (piece job)'), ('seasonal_employment', 'seasonal employment'), ('full_time', 'Formal wage employment(full time)'), ('part_time', 'Formal wage employment (part-time)'), ('self_employed_agriculture', 'Self-employed in agriculture'), ('self_employed making money_full time', 'Self-employed making money, full time')], max_length=50, null=True, verbose_name='In your main job what type of work do you do?')),
                ('recent_job', models.CharField(blank=True, choices=[('farmer', 'farmer(own land)'), ('farm_work_on_employers_land', 'farm work on employers land'), ('domestic_worker', 'domestic worker'), ('entertainment_venue', 'Work in bar/ hotel/ guest house/ entertainment venue'), ('fishing', 'fishing'), ('mining', 'mining'), ('tourism', 'tourism/game parks'), ('shop_small business', 'shop/small business'), ('informal_selling', 'informal_selling'), ('commercial_sex_work', 'commercial_sex_work'), ('transport', 'transport(trucker/ taxi driver'), ('factory_worker', 'factory_worker'), ('security_company', 'guard (security company)'), ('police_soldier', 'police/soldier'), ('clerical_office work', 'clerical /office work'), ('government_worker', 'government worker'), ('teacher', 'teacher'), ('health_care_worker', 'health_care_worker'), ('no_answer', 'dont want to answer'), ('other', 'other')], max_length=100, verbose_name='Describe the work that you do or did in your most recent job. If you have more than one profession, choose the one you spend the most time doing')),
                ('salary', models.CharField(blank=True, choices=[('none', 'none'), ('no_income', 'no income'), ('two_hundred', '1-199 pula'), ('five_hundred', '200-499 pula'), ('one_thousand', '500-999 pula'), ('five_thousand', '5000-10,000 pula'), ('above_ten_thousand', 'more than 10,000 pula'), ('no_answer', 'dont want to answer')], max_length=100, verbose_name='n the past month, how much money did you earn from work you did or received in payment?')),
            ],
            options={
                'verbose_name_plural': 'Education',
            },
        ),
        migrations.CreateModel(
            name='SubjectConsent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('marital_status', models.CharField(blank=True, choices=[('single', 'single'), ('married', 'married'), ('divorced', 'divorced')], max_length=15, null=True, verbose_name='Are you single, married or divorced?')),
                ('stay_with', models.CharField(blank=True, choices=[('alone', 'alone'), ('partner', 'partner'), ('siblings', 'siblings'), ('other', 'other')], max_length=15, null=True, verbose_name='Who do you currently stay with?')),
                ('wives', models.IntegerField(blank=True, null=True, verbose_name='If wife, how many wives does your husband have (including traditional marriage), including yourself??')),
                ('husbands', models.IntegerField(blank=True, null=True, verbose_name='How many wives do you have, including traditional marriage?')),
            ],
            options={
                'verbose_name_plural': 'Subject Consent',
            },
        ),
        migrations.CreateModel(
            name='HistoricalEnrollment',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('slug', models.CharField(db_index=True, default='', editable=False, help_text='a field used for quick search', max_length=250, null=True)),
                ('screening_identifier', models.CharField(db_index=True, max_length=36, verbose_name='Screening identifier')),
                ('gender', models.CharField(choices=[('male', 'male'), ('female', 'female')], max_length=10, verbose_name='Gender ')),
                ('citizenship', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=5, null=True, verbose_name='Citizen of Botswana?')),
                ('legally_married', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=5, null=True, verbose_name='Legally married to a Botswana Citizen?')),
                ('marriage_certificate', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=5, null=True, verbose_name='Has the participant produced marriage certificate as proof?')),
                ('literacy', models.CharField(blank=True, choices=[('literate', 'literate'), ('illiterate_witness_available', 'illiterate and literate witness available'), ('illiterate_witness_unavailable', 'illiterate and literate witness unavailable')], max_length=50, null=True, verbose_name='Is the participant literate or illiterate ?If illiterate is there a witness available?')),
                ('minor', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=5, null=True, verbose_name='If minor, is there a guardian available?')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
            ],
            options={
                'verbose_name': 'historical enrollment',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='Enrollment',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('slug', models.CharField(db_index=True, default='', editable=False, help_text='a field used for quick search', max_length=250, null=True)),
                ('screening_identifier', models.CharField(max_length=36, unique=True, verbose_name='Screening identifier')),
                ('gender', models.CharField(choices=[('male', 'male'), ('female', 'female')], max_length=10, verbose_name='Gender ')),
                ('citizenship', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=5, null=True, verbose_name='Citizen of Botswana?')),
                ('legally_married', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=5, null=True, verbose_name='Legally married to a Botswana Citizen?')),
                ('marriage_certificate', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=5, null=True, verbose_name='Has the participant produced marriage certificate as proof?')),
                ('literacy', models.CharField(blank=True, choices=[('literate', 'literate'), ('illiterate_witness_available', 'illiterate and literate witness available'), ('illiterate_witness_unavailable', 'illiterate and literate witness unavailable')], max_length=50, null=True, verbose_name='Is the participant literate or illiterate ?If illiterate is there a witness available?')),
                ('minor', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=5, null=True, verbose_name='If minor, is there a guardian available?')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
            ],
            options={
                'verbose_name_plural': 'Enrollment',
            },
        ),
    ]
